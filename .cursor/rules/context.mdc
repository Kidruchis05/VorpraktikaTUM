---
alwaysApply: true
---
# VorpraktikaTUM - Project Context

## What This Is
Student-run platform for brutally honest Vorpraktikum (pre-internship) reviews at TUM.
Students share experiences, upvote reviews, find legit opportunities.

## Current State (Oct 30, 2025)

### What Works:
✅ Main page displays reviews from Supabase
✅ Submit form adds reviews to database
✅ Upvoting works (localStorage prevents duplicates)
✅ RLS policies allow anonymous read/write/update
✅ Live Server running locally

### What's In Progress:
⚠️ Adding reviewer_name field to submit form
⚠️ Need sorting (by upvotes/date)
⚠️ Need filtering (by paid/unpaid tags)

### What's Missing for MVP:
❌ Deployment (Vercel)
❌ Better review structure (structured template)
❌ Admin moderation

---

## Database Schema (Supabase)

### Table: reviews
```sql
id              uuid primary key (auto)
created_at      timestamp (auto)
company         text (required)
website         text (optional)
comment         text (the review content)
tags            text[] (e.g. ['paid', 'vorpraktikum', 'duration-4-8'])
upvotes         integer (default 0)
reviewer_name   text (e.g. "Max M. (Semester 2)")
verified        boolean (default false, for later)
pdf_hash        text (for PDF verification, not implemented)
user_id         uuid (references auth.users, nullable - not using auth yet)
```

### RLS Policies:
- anon can SELECT
- anon can INSERT
- anon can UPDATE (for upvotes)

### Functions:
```sql
increment_upvotes(review_id uuid) - increments upvote count
```

---

## File Structure
```
project/
├── .cursorrules              ← Cursor instructions
├── CONTEXT.md                ← This file (project state)
├── .gitignore
├── README.md
├── server.js                 ← Empty, not needed
├── docs/
│   └── supabase_rls.sql     ← RLS policies
├── .cursor/
│   └── rules/
│       └── myvibe.mdc       ← Long-form project vision
└── public/                   ← All frontend code
    ├── main.html             ← Landing page
    ├── submit.html           ← Review submission form
    ├── login.html            ← Exists but not used yet
    ├── styles.css            ← HN-inspired minimal CSS
    ├── scripts.js            ← Supabase client setup
    ├── showReviews.js        ← Fetches and displays reviews
    ├── submitReview.js       ← Handles form submission
    ├── upvote.js             ← Upvoting logic
    ├── tags.js               ← Not currently used
    └── vlogogrey.png         ← Logo
```

---

## Supabase Config
```javascript
// In scripts.js
const SUPABASE_URL = "https://fqsuegrrtmazhgjhvsmr.supabase.co";
const SUPABASE_ANON_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...";
```

---

## Key Design Decisions

### Why Plain HTML/JS?
- First real project for solo student developer
- Simple CRUD app, no complex state management
- Fast iteration, easy debugging
- No build step = no deployment headaches

### Why Supabase?
- PostgreSQL with auth built-in
- Free tier sufficient (500MB, 50k MAU)
- No backend code needed (RLS handles permissions)
- Real-time if needed later

### Why No Auth Yet?
- Anonymous reviews get content faster
- Auth adds complexity (50%+ more work)
- Will add when moderation becomes necessary

### Why Text-First Design?
- HN aesthetic: scannable, fast, no bloat
- Students want blunt info, not pretty UI
- Mobile-friendly by default
- Low bandwidth usage

---

## Recent Changes (Last Session)

1. Fixed `comment` field from `text[]` to `text` 
2. Added upvote functionality with localStorage tracking
3. Fixed double click handler bug (removed inline onclick)
4. Separated upvote count from button for cleaner structure

---

## Next Steps (Immediate)

1. Add `reviewer_name` field to submit form
2. Display reviewer name on review cards
3. Add sorting dropdown (upvotes/date)
4. Add filtering (paid/unpaid/all)
5. Deploy to Vercel

---

## Known Issues

- None blocking currently

---

## Testing Locally
```bash
# Use Live Server extension in VSCode
# Or:
cd public
python3 -m http.server 8000
# Then: http://localhost:8000/main.html
```

---

## Deployment Plan

1. Create `vercel.json` config
2. Push to GitHub
3. Connect repo to Vercel
4. Auto-deploys on every push

---

Last Updated: Oct 30, 2025
```

---

## How To Use This With Cursor

### When You Start Coding:
Just open Cursor and start with: 
```
"Add reviewer name field to the submit form"